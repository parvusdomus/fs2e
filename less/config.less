// Fonts
@font-face {
  font-family: "Baron Neue";
  src: url("fonts/Baron Neue.otf");
}

@font-face {
  font-family: "Baron Neue";
  src: url("fonts/Baron Neue Bold.otf");
  font-weight: bold;
}

@font-face {
  font-family: "Baron Neue";
  src: url("fonts/Baron Neue Italic.otf");
  font-style: italic;
}

@font-face {
  font-family: "Baron Neue";
  src: url("fonts/Baron Neue Bold Italic.otf");
  font-weight: bold;
  font-style: italic;
}

@font-face {
  font-family: "Gotham Book";
  src: url("fonts/Gotham Book Regular.otf");
}

@font-face {
  font-family: "Gotham Book";
  src: url("fonts/Gotham Bold.otf");
  font-weight: bold;
}

@font-face {
  font-family: "Gotham Book";
  src: url("fonts/Gotham Book Italic.otf");
  font-style: italic;
}

@font-face {
  font-family: "Gotham Book";
  src: url("fonts/Gotham Bold Italic.otf");
  font-weight: bold;
  font-style: italic;
}

.BaronNeue(@weight: normal) {
  text-transform: lowercase;
  font-family: "Baron Neue";
  font-weight: @weight;
}

.GothamBook(@weight: normal) {
  font-family: "Gotham Book";
  text-transform: none;
  font-weight: @weight;
}

// Colors
@main-color: #9f0300;
@accent-color: white;
@hud-bg: rgba(0, 0, 0, 0.6);
@gm-scene-border-color: #5d4363;
@gm-scene-bg: #cec6d0;
@select-bg-color: white;
@translucent-accent-color: rgba(255, 255, 255, 0.9);
@translucent-bg-color: rgba(255, 255, 255, 0.8);
@form-select-bg-color: #9f03004b;

@core-main-color: #ce751e;
@core-bg-color: #f0d5bb;
@supernatural-main-color: #910055;
@supernatural-bg-color: #deb2cc;
@gun-main-color: #375867;
@gun-bg-color: #c3cdd1;
@animal-main-color: #e85b2a;
@animal-bg-color: #f8cdbf;
@fu-main-color: #537b40;
@fu-bg-color: #cbd7c5;
@gene-main-color: #006c7d;
@gene-bg-color: #b2d3d8;
@driving-main-color: #3a393c;
@driving-bg-color: #c4c3c4;
@scroungetech-main-color: #5d4363;
@scroungetech-bg-color: #cec6d0;
@sorcery-main-color: #004e7a;
@sorcery-bg-color: #b2cad7;
@disadvantage-main-color: #000000;
@disadvantage-bg-color: #e6e7e7;

@whisper-color: #e8e8ef;
@hover-color: #e8e8e8;
@disabled-input-color: #dadada;
@input-bg-color: rgba(0, 0, 0, 0.05);

//backgrounds
@sheet-background: @accent-color;
@sidebar-background: url(../../ui/parchment.jpg) repeat;
@secret-bg-color: #c5d8ae;

@button-border-thickness: 2px;

.white-on-red() {
  background-color: @main-color;
  color: @accent-color;
}

.red-carpet() {
  &::before {
    content: "";
    background: @main-color;
    position: absolute;
    top: 0;
    left: 10%;
    right: 10%;
    bottom: 0;
    z-index: -1;
    .clipCorners();
  }
}

.canvas-shadow() {
  filter: drop-shadow(0 0 10px black);
}

.input-shadow() {
  box-shadow: 0 0 4px #000 inset;
}

// Bevels
@bevel-size: 5px;
@shtick-bevel: 15px;
@defaultCornerClip: 8px;

// Layout
@defaultGap: 0.75em;
@baronBottomPadding: 0.25em;
@sidebar-bg-width: 80%;
@sidebar-bg-position: calc((100% - @sidebar-bg-width) / 2);

// Functions
.clipBottom(@bevel: @defaultCornerClip) {
  clip-path: polygon(100% 0px,
      100% calc(100% - @bevel),
      calc(100% - @bevel) 100%,
      @bevel 100%,
    @bevel 100%, 
      @bevel 100%,
      0px calc(100% - @bevel),
      0px 0px);
}

.clipCost(@bevel: @defaultCornerClip) {
  clip-path: polygon(calc(100% - @bevel) 0px,
      100% @bevel,
      100% 100%,
      @bevel 100%,
    @bevel 100%, 
      @bevel 100%,
      0px calc(100% - @bevel),
      0px 0px);
}

.clipTop(@bevel: @defaultCornerClip) {
  clip-path: polygon(@bevel 0px,
      calc(100% - @bevel) 0px,
      100% @bevel,
      100% 100%,
      0px 100%,
    0px 100%, 
      0px 100%,
      0px @bevel);
}

.clipRight(@bevel: @defaultCornerClip) {
  clip-path: polygon(0px 0px,
      calc(100% - @bevel) 0px,
      100% @bevel,
      100% calc(100% - @bevel),
      calc(100% - @bevel) 100%,
      0px 100%);
}

.clipLeft(@bevel: @defaultCornerClip) {
  clip-path: polygon(@bevel 0px,
      100% 0px,
      100% 100%,
      @bevel 100%,
    @bevel 100%, 
      @bevel 100%,
      0px calc(100% - @bevel),
      0px @bevel);
}

.clipCorners(@bevel: @defaultCornerClip) {
  clip-path: polygon(@bevel 0px,
      calc(100% - @bevel) 0px,
      100% @bevel,
      100% calc(100% - @bevel),
      calc(100% - @bevel) 100%,
      @bevel 100%,
    @bevel 100%, 
      @bevel 100%,
      0px calc(100% - @bevel),
      0px @bevel);
}

.cancelClippedBorder() {
  clip-path: none;

  &::before {
    content: none;
  }

  &::after {
    content: none;
  }
}

.clippedBorder(@color: @main-color,
  @borderThickness: 4px,
  @background: @accent-color,
  @clipSize: @defaultCornerClip,
  @contextMenu: false) {
  position: relative;
  border: none;

  & when (@contextMenu =false) {
    background: @background;
    .clipCorners(@clipSize);
  }

  & when (@contextMenu =true) {
    background: none;

    &::before {
      content: "";
      background: @background;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      .clipCorners(@clipSize);
      z-index: -1;
    }
  }

  &::after {
    clip-path: polygon(calc(100% - @clipSize) 0%,
        @clipSize 0%,
        0% @clipSize,
        0% calc(100% - @clipSize),
        @clipSize 100%,
        calc(@borderThickness + @clipSize) calc(100% - @borderThickness),
        @borderThickness calc(100% - @borderThickness - @clipSize),
        @borderThickness calc(@borderThickness + @clipSize),
        calc(@borderThickness + @clipSize) @borderThickness,
        calc(100% - @borderThickness - @clipSize) @borderThickness,
        calc(100% - @borderThickness) calc(@borderThickness + @clipSize),
        calc(100% - @borderThickness) calc(100% - @borderThickness - @clipSize),
        calc(100% - @borderThickness - @clipSize) calc(100% - @borderThickness),
        calc(@borderThickness + @clipSize) calc(100% - @borderThickness),
        @clipSize 100%,
        calc(100% - @clipSize) 100%,
        100% calc(100% - @clipSize),
        100% @clipSize);
    content: "";
    background: @color;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}